{"version":3,"sources":["components/Filter.js","components/NewContactForm.js","components/ContactList.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","label","handleSearch","placeholder","type","onChange","NewContactForm","newName","handleNameChange","newNumber","handleNumberChange","addContact","onSubmit","value","ContactRow","person","handleClick","name","number","onClick","ContactList","persons","newSearch","listNames","filter","toLowerCase","includes","map","key","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","res","Notification","message","className","text","App","useState","setPersons","setNewName","setNewNumber","setNewSearch","setNewMessage","useEffect","personService","initialPersons","notificationTimeout","setTimeout","handleGenericError","err","console","log","error","event","target","preventDefault","trim","foundNameIndex","findIndex","window","confirm","personObject","backEndId","returnedContact","catch","concat","contactToDelete","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c039d05.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({ label, handleSearch, placeholder }) => {\r\n    return (\r\n      <>\r\n      {label}\r\n      <input\r\n        type=\"search\"\r\n        onChange={handleSearch}\r\n        placeholder={placeholder}>\r\n      </input>\r\n      </>\r\n    )\r\n  }\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst NewContactForm = ({ newName, handleNameChange, newNumber, handleNumberChange, addContact }) => {\r\n    return <form onSubmit={addContact}>\r\n      <div>\r\n        name: <input\r\n          value={newName}\r\n          onChange={handleNameChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        number: <input\r\n          value={newNumber}\r\n          onChange={handleNumberChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  }\r\n\r\n  export default NewContactForm","import React from 'react'\r\n\r\nconst ContactRow = ({ person, handleClick }) => {\r\n    return <li>{person.name} {person.number}<button onClick={() => handleClick(person)}>Delete</button></li>\r\n}\r\n\r\nconst ContactList = ({ persons, newSearch, handleClick }) => {\r\n\r\n\r\n    const filteredPersons = persons.filter(person => person.name.toLowerCase().includes(newSearch.toLowerCase()))\r\n    const listNames = filteredPersons.map(person => <ContactRow key={person.name} person={person} handleClick={handleClick} />)\r\n\r\n\r\n    return <ul>{listNames}</ul>\r\n}\r\n\r\nexport default ContactList","import axios from 'axios'\r\n\r\n// because we are exporting the front end as a production build and both backend and frontend are\r\n// served from the same address, we can declare baseUrl as a relative URL.\r\nconst baseUrl = '/api/persons'\r\n// const baseUrl = 'https://ndeamador-fso2020-phonebook.herokuapp.com/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n      const request = axios.delete(`${baseUrl}/${id}`)\r\n      return request.then(res => res.data)\r\n}\r\n\r\n\r\n\r\n// export default {\r\n//     getAll: getAll,\r\n//     create: create,\r\n//     update: update,\r\n//     deleteContact: deleteContact\r\n// }\r\n\r\nexport default { getAll, create, update, deleteContact }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message.type === null) {\r\n        return null\r\n    }\r\n    else {\r\n        return (\r\n            <div className={message.type}>\r\n                {message.text}\r\n            </div>\r\n        )\r\n    }\r\n    // else if (message.type === 'success') {\r\n    //     return (\r\n    //         <div className='notification'>\r\n    //             {message.text}\r\n    //         </div>\r\n    //     )\r\n    // }\r\n    // else if (message.type === 'exception') {\r\n    //     return (\r\n    //         <div className='notification'>\r\n    //             {message.text}\r\n    //         </div>\r\n    //     )\r\n    // }\r\n    // else if (message.type === 'error') {\r\n    //     return (\r\n    //         <div className='notification'>\r\n    //             {message.text}\r\n    //         </div>\r\n    //     )\r\n    // }\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Filter from './components/Filter'\r\nimport NewContactForm from './components/NewContactForm'\r\nimport ContactList from './components/ContactList'\r\nimport personService from './services/persons'\r\nimport Notification from './components/Notification'\r\n\r\n\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [newSearch, setNewSearch] = useState('')\r\n  const [message, setNewMessage] = useState({ type: null, text: null })\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    personService\r\n      .getAll()\r\n      .then(initialPersons => {\r\n        setPersons(initialPersons)\r\n      })\r\n  }, [])\r\n\r\n\r\n\r\n  const notificationTimeout = () => {\r\n    setTimeout(() => {\r\n      setNewMessage(\r\n        {\r\n          type: null,\r\n          text: null\r\n        }\r\n      )\r\n    }, 5000)\r\n  }\r\n\r\n  const handleGenericError = (err) => {\r\n\r\n    console.log(err.response.data)\r\n\r\n    setNewMessage({\r\n      type: 'error',\r\n      text: `${err.name}: ${err.response.data.error}`\r\n    })\r\n  }\r\n\r\n\r\n\r\n  const addContact = (event) => {\r\n    event.preventDefault()\r\n\r\n    // Throw exception if name field is empty\r\n    if (newName.trim() === '') {\r\n      setNewMessage(\r\n        {\r\n          type: 'exception',\r\n          text: `Name can't be empty`\r\n        })\r\n\r\n      notificationTimeout()\r\n    }\r\n    else if (newName.trim() !== '') {\r\n\r\n      // make both lower case so that the same name can't be added twice just by using capitals.\r\n      const foundNameIndex = persons.findIndex(person => person.name.toLowerCase() === newName.toLowerCase())\r\n\r\n      // if the contact already exists, update the number\r\n      if (foundNameIndex > -1) {\r\n\r\n        if (window.confirm(`${newName} is already on the phonebook.\\nReplace the old number witha new one?`)) {\r\n\r\n          const personObject = {\r\n            name: newName,\r\n            number: newNumber\r\n          }\r\n\r\n          // The id property of the object and the object position in the array (foundNameIndex) are not necessarily the same:\r\n          const backEndId = persons[foundNameIndex].id\r\n\r\n          personService\r\n            .update(backEndId, personObject)\r\n            .then(returnedContact => {\r\n              // if the contact to update has been deleted in the database, delete it from the front end\r\n              if (returnedContact === null) {\r\n                setPersons(persons.filter(person => person.id !== backEndId))\r\n\r\n                setNewMessage(\r\n                  {\r\n                    type: 'exception',\r\n                    text: `Contact ${newName} not found in server. Phonebook updated.`\r\n                  })\r\n\r\n                  notificationTimeout()\r\n\r\n              } else {\r\n                // used returnedContact instead of personObject for the update as adding the object with no id was creating an error when deleting.\r\n                setPersons(persons.map(person => person.id === returnedContact.id ? returnedContact : person))\r\n                setNewName('')\r\n                setNewNumber('')\r\n\r\n                setNewMessage(\r\n                  {\r\n                    type: 'success',\r\n                    text: `${returnedContact.name}'s number changed to ${returnedContact.number}`\r\n                  })\r\n\r\n                notificationTimeout()\r\n              }\r\n            })\r\n            .catch(err => {\r\n\r\n              // setPersons(persons.filter(person => person.id !== backEndId))\r\n\r\n              // setNewMessage(\r\n              //   {\r\n              //     type: 'error',\r\n              //     text: `${err.name}: Contact ${newName} was already deleted from server. Phonebook updated.`\r\n              //   })\r\n\r\n              handleGenericError(err)\r\n              notificationTimeout()\r\n\r\n            })\r\n        }\r\n      }\r\n      // if the contact does not exist\r\n      else {\r\n        const personObject = {\r\n          name: newName,\r\n          number: newNumber\r\n        }\r\n\r\n        personService\r\n          .create(personObject)\r\n          .then(returnedContact => {\r\n            // used returnedContact instead of personObject for the update as adding the object with no id was creating an error when deleting.\r\n            setPersons(persons.concat(returnedContact))\r\n            setNewName('')\r\n            setNewNumber('')\r\n\r\n            setNewMessage(\r\n              {\r\n                type: 'success',\r\n                text: `Added contact ${newName}`\r\n              })\r\n\r\n            notificationTimeout()\r\n\r\n          })\r\n          .catch(err => {\r\n\r\n            handleGenericError(err)\r\n            notificationTimeout()\r\n          })\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  const handleSearch = (event) => {\r\n    setNewSearch(event.target.value)\r\n  }\r\n\r\n  const handleDeleteClick = (contactToDelete) => {\r\n\r\n    if (window.confirm(`Delete contact ${contactToDelete.name}?`)) {\r\n\r\n      personService.deleteContact(contactToDelete.id)\r\n        .then(() => {\r\n          setPersons(persons.filter(person => person.id !== contactToDelete.id))\r\n\r\n          setNewMessage({\r\n            type: 'success',\r\n            text: `Contact ${contactToDelete.name} deleted.`\r\n          })\r\n\r\n          notificationTimeout()\r\n\r\n        })\r\n        .catch(err => {\r\n          // setPersons(persons.filter(person => person.id !== contactToDelete.id))\r\n          // setNewMessage({\r\n          //   type: 'error',\r\n          //   text: `${err.name}: Contact ${contactToDelete.name} not found in the server. Phonebook updated.`\r\n          // })\r\n\r\n          handleGenericError(err)\r\n          notificationTimeout()\r\n        })\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n\r\n      <Notification message={message} />\r\n\r\n      <Filter label=\"filter shown with\" handleSearch={handleSearch} placeholder=\"Search contact's name\" />\r\n\r\n      <h3>Add a new</h3>\r\n\r\n      <NewContactForm\r\n        newName={newName}\r\n        handleNameChange={handleNameChange}\r\n        newNumber={newNumber}\r\n        handleNumberChange={handleNumberChange}\r\n        addContact={addContact}\r\n      />\r\n\r\n      <h3>Numbers</h3>\r\n\r\n      <ContactList persons={persons} newSearch={newSearch} handleClick={handleDeleteClick} />\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}